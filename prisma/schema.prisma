// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  password        String
  bio             String?   @db.Text
  image           String?
  articles        Article[]
  comments        Comment[]
  followers       Follow[]  @relation("FollowerRelation")
  following       Follow[]  @relation("FollowingRelation")
  clappedArticles Int[]     @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  body      String    @db.Text
  tags      String[]
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  comments  Comment[]
  numClaps  Int       @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@unique([followerId, followingId])
}
